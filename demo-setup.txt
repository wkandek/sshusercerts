== Setup Demo SSH Usercerts ==

In the demo we will setup 3 linux machines, a client, a server and an authnetication server. Client and Server are
generic, the client will be used to login into the server via SSH. The authentciation server will emit the certificates
used. In explicit demo mode it also has simple capabilities to add new users, generate 2FA tokens and allow for an 
SSH login into a restricted shell - the idea here is to use the setup in a workshop where the participants might have limited access to a server and client machine. It is not a good idea to provide commandline access to the server that signs the
certificate used, so use only in real demo situations.

1. Get a Linux server for authentication
- DigitalOcean Droplet - Ubuntu 18.04 LTS - 1 GB, 25 GB disk
- apt-get update; apt-get upgrade
- create user 'sshusercerts'
  - useradd sshusercerts -m -s /bin/bash
- create user 'testuser'
  - useradd testuser -m -s /bin/bash
  - passwd testuser

2. create a client machine
- DigitalOcean Droplet - Ubuntu 18.04 LTS - 1 GB, 25 GB disk
- create user 'testuser'
  - useradd testuser -m -s /bin/bash

3. Create signing certificate
- mkdir /home/sshusercerts/CA; cd CA
- ssh-keygen -f demosshusercert
  - no password; generates the certificates public and private key
- ssh-keygen -l to check
- sign a public key manually
  - copy a key from 
  - cd ; ssh-keygen; 
  - sign: ssh-keygen -s ./CA/demosshusercert -I user_sshusercerts -h -n sshusercerts -V +1w ./.ssh/id_rsa.pub
  - info: ssh-keygen -L -f ./.ssh/id_rsa-cert.pub look for Valid line
  
3. Install sshusercerts core service
- mkdir /home/sshusercerts/sshusercerts; cd sshusercerts
  - files: main.py; server.py
  - copy private and public key from ../CA
  
- edit Dockerfile to reference correct key name in CERTNAME var
- docker build --tag=sshusercerts .
- docker run -it -p 8080:8080 sshusercerts
- test with links http://127.0.0.1:8080/sign.html

4. nginx frontend 443 forwards to 8080 and we use a let's encrypt certificate
a domainname is required, needs to be configured to resolve to the IP of the server
here we use: sshusercertsdemo.demodomain.life

- cd; mkdir sshusercerts-nginx
- files: docker-compose.yml; data/nginx/app.conf; init-letsencrypt.sh
- edit app.conf so that sshusercertsdemo.demodomain.life is reference inteh 2 server_name lines, plus the 2 ssl_certifictes lines,
  plus the proxy_pass line
- edit init-letsencrpt.sh to include sshusercertsdemo.demodomain.life, set staging to 1 while testing
- run init-letsencrypt.sh - this shoudl request a certificate, once that works switch to staging=0 a rerun to get  
  a real certificate
  init-letsencrypt comes from: https://medium.com/@pentacent/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
  and depends on docker-compose

6. start it all up together via a docker swarm
- docker swarm init 
- docker stack deploy -d docker-deploy.yml uc

7. Prepare user environment: Demomode creates users with a restricted shell in directory /home/genericuser
- cd /home; mkdir genericuser; mkdir genericuser/bin
- cp /bin/ls /home/genericuser/bin
- echo "export PATH=/home/genericuser/bin" > /home/genericuser/.bashrc
- echo "export PATH=/home/genericuser/bin" > /home/genericuser/.bash_profile
- touch "/home/genericuser/You_are_in_a_restricted_env"

8. sign a cert
username, password, OTP and the contents of id_rsa.pub

put the returning contents in .ssh\id_rsa-cert.pub

log into the demoserver: ssh sshusercertsdemo.demodomain.life

you will be in a restricted shell, only ls is allowed...

Locally check validity with this command:

ssh-keygen -L -f .ssh\id_rsa-cert.pub
.ssh\id_rsa-cert.pub:
        Type: ssh-rsa-cert-v01@openssh.com user certificate
        Public key: RSA-CERT SHA256:VGzctJZ+mVXrKiDSUUwWpi4t2UhvTmn+sfrK4mOHBY0
        Signing CA: RSA SHA256:p3Ah04/bmullNoCN8oafnb9iTHtPlPv9h85c63iEWBQ
        Key ID: "user_wkandek_cert"
        Serial: 0
        Valid: from 2019-03-13T08:01:00 to 2019-03-13T09:02:08
        Principals:
                wkandek
        Critical Options: (none)
        Extensions:
                permit-X11-forwarding
                permit-agent-forwarding
                permit-port-forwarding
                permit-pty
                permit-user-rc

9. Create 2 Linux servers used for login demos 

9a. Use the authnetication server to create a new user via /add.py 

